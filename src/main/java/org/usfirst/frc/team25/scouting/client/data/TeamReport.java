package org.usfirst.frc.team25.scouting.client.data;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;

import org.usfirst.frc.team25.scouting.client.models.ScoutEntry;

/** Object model containing individual reports of teams in events and methods to process data
 * 
 * @author sng
 *
 */
public class TeamReport {
	
	transient int teamNum;
	private ArrayList<ScoutEntry> entries;
	String teamName;
	
	//TODO calculate these values and update EventReport
		double avgPointsPerCycle, avgCycles, sdCycles , reachBaselinePercentage;
		boolean autoShootsKey;
		double autoAbility, teleOpAbility, driveTeamAbility, robotQualities;
		double firstPickAbility, secondPickAbility;
	
	double avgAutoScore, avgTeleOpScore, avgMatchScore, avgAutoKpa, avgTeleOpGears, avgTotalFuel, avgHoppers;
	
	
	double sdAutoScore, sdTeleOpScore, sdMatchScore, sdTeleOpGears, sdTotalFuel;
	double takeoffAttemptPercentage, takeoffSuccessPercentage;// attempt is out of all matches; success is for each attempt
	double pilotPlayPercentage;
	
	ArrayList<String> frequentRobotComment = new ArrayList<>(), frequentPilotComment = new ArrayList<>();
	
	
	
	transient String frequentRobotCommentStr = "", frequentPilotCommentStr = "";
	
	public TeamReport(int teamNum){
		this.teamNum = teamNum;
		entries = new ArrayList<ScoutEntry>(); //initialize ArrayList
	}
	
	/** Method to fetch the nickname of a team from a file 
	 * 
	 * @param dataLocation location of the TeamNameList file generated by <code>exportTeamList</code>
	 */
	public void autoGetTeamName(File dataLocation){
		String data = FileManager.getFileString(dataLocation);
		String[] values = data.split(",\n");
		for(int i = 0; i < values.length; i++)	
			if(values[i].split(",")[0].equals(Integer.toString(teamNum))){
				teamName = values[i].split(",")[1];
				return; //Terminates the method
			}	
	}
	
	public void calculateStats(){
		
		
		int totalTakeoffAttempts = 0, totalTakeoffSuccesses = 0;
		
		
		for(int i = 0; i < entries.size(); i++){
			if(entries.get(i).getTeleOp().isAttemptTakeoff())
				totalTakeoffAttempts++;
			if(entries.get(i).getTeleOp().isReadyTakeoff())
				totalTakeoffSuccesses++;
		}
		
		takeoffAttemptPercentage = ((double) totalTakeoffAttempts)/entries.size();
		takeoffSuccessPercentage = totalTakeoffAttempts/((double) totalTakeoffSuccesses);
		
		
				
		int[] totalHoppers = new int[entries.size()];
		for(int i = 0; i < entries.size(); i++)
			totalHoppers[i] = (entries.get(i).getAuto().isUseHoppers() ? 1 : 0) + entries.get(i).getTeleOp().getHopppersUsed();
		avgHoppers = Statistics.average(totalHoppers);
		
		int[] totalFuel = new int[entries.size()];
		for(int i = 0; i < entries.size(); i++)
			totalFuel[i] = entries.get(i).getAuto().getHighGoals()+entries.get(i).getAuto().getLowGoals()
			+entries.get(i).getTeleOp().getHighGoals()+entries.get(i).getTeleOp().getLowGoals();
		avgTotalFuel = Statistics.average(totalFuel);
		sdTotalFuel = Statistics.popStandardDeviation(totalFuel);
		
		int[] teleOpGears = new int[entries.size()];
		for(int i = 0; i < entries.size(); i++)
			teleOpGears[i] = entries.get(i).teleOp.getGearsDelivered();
		avgTeleOpGears = Statistics.average(teleOpGears);
		sdTeleOpGears = Statistics.popStandardDeviation(teleOpGears);
		
		int[] autoKpas = new int[entries.size()];
		for(int i = 0; i < entries.size(); i++)
			autoKpas[i] = entries.get(i).autoKpa;
		avgAutoKpa = Statistics.average(autoKpas);
		
		
		int[] autoScores = new int[entries.size()];
		for(int i = 0; i < entries.size(); i++)
			autoScores[i]=entries.get(i).autoScore;
		avgAutoScore = Statistics.average(autoScores);
		sdAutoScore = Statistics.popStandardDeviation(autoScores);
		
		int[] teleOpScores = new int[entries.size()];
		for(int i = 0; i < entries.size(); i++)
			teleOpScores[i] = entries.get(i).teleScore;
		avgTeleOpScore = Statistics.average(teleOpScores);
		sdTeleOpScore = Statistics.popStandardDeviation(teleOpScores);
		
		int[] matchScores = new int[entries.size()];
		for(int i = 0; i < entries.size(); i++)
			matchScores[i] = entries.get(i).totalScore;
		avgMatchScore = Statistics.average(matchScores);
		sdTeleOpScore = Statistics.popStandardDeviation(matchScores);
		
		HashMap<String, Integer> commentFrequencies = new HashMap<>();
		
		
		for(String key : entries.get(0).getPostMatch().getRobotQuickCommentSelections().keySet()){
			commentFrequencies.put(key, 0);
			for(ScoutEntry entry : entries)
				if(entry.getPostMatch().getRobotQuickCommentSelections().get(key))
					commentFrequencies.put(key, 1+commentFrequencies.get(key));
		}
		
		for(String key : commentFrequencies.keySet())
			if(commentFrequencies.get(key)>=entries.size()/4.0)
				frequentRobotComment.add(key);
		
		commentFrequencies = new HashMap<>();
		
		int totalPilotPlaying = 0;
		
		for(int i = 0; i < entries.size(); i++)
			if(entries.get(i).getPreMatch().isPilotPlaying())
				totalPilotPlaying++;
			
		pilotPlayPercentage = ((double) totalPilotPlaying)/entries.size();
		
		
		for(String key : entries.get(0).getPostMatch().getPilotQuickCommentSelections().keySet()){
			commentFrequencies.put(key, 0);
			for(ScoutEntry entry : entries)
				if(entry.getPreMatch().isPilotPlaying())
					if(entry.getPostMatch().getPilotQuickCommentSelections().get(key))
						commentFrequencies.put(key, 1+commentFrequencies.get(key));
		}
		
		for(String key : commentFrequencies.keySet())
			if(commentFrequencies.get(key)>=totalPilotPlaying/4.0)
				frequentPilotComment.add(key);
		
		for(String comment : frequentRobotComment)
			frequentRobotCommentStr+=comment+';';
		for(String comment : frequentPilotComment)
			frequentPilotCommentStr+=comment+';';
		
		computeRankingMetrics();
				
	}	
	
	void computeRankingMetrics(){
		autoAbility = 0;
		teleOpAbility = 0;
		driveTeamAbility = 0;
		robotQualities = 0;
		firstPickAbility = 0;
		secondPickAbility = 0;
	}

	public int getTeamNum(){
		return teamNum;
	}
	

	public void addEntry(ScoutEntry entry){
		entries.add(entry);
	}
	

	

}
